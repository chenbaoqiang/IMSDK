// ************************************************************************************
//  NOTICE: This File Generated By Tools. DO NOT Modify. Copyright (c) Interrcs.com
// ************************************************************************************

//  考虑android native调试困难而且RcsApi也不需要直接暴露，尽量把逻辑实现在java层，保持Jni层尽量简单
//  Java的API封装就不采用NodeJs版本那样纯native实现

package com.interrcs.sdk;
import android.content.Context;

public class RcsApi {
    
    static {
        System.loadLibrary("RcsSdk");
    }
    
    /**
     * @brief 创建新的 Sdk 实例
     *
     * @param number 用户号码
     * @param imei 用户设备标识
     * @param imsi 用户移动身份标识
     * @param devicevendor 设备厂商名称
     * @param devicemodel 设备型号
     * @param deviceos 操作系统名称
     * @param deviceosversion 操作系统版本号
     * @param clientVendor 客户端厂商名称
     * @param clientVersion 客户端版本号
     * @param storage 文件存储路径
     * @param appid 用户所属组织Id
     * @param syspath 配置文件存储路径
     * @return RcsState 实例
     *
     */
    public static RcsState newState(Context context, String number, String imei, String imsi, String devicevendor, String devicemodel,
    String deviceos, String deviceosversion, String clientvendor, String clientversion, String storage,
    String appid, String syspath){
        long statePtr = nativeNewState(number, imei, imsi, devicevendor, devicemodel, deviceos, deviceosversion, clientvendor, clientversion,
                storage, appid, syspath);
        RcsState state = new RcsState(statePtr, number);
        state.setSdkAlarm(new SdkAlarm(state, context));
        state.startState();
        return state;
    }
    
    private static native long nativeNewState(String number, String imei, String imsi, String devicevendor, String devicemodel,
    String deviceos, String deviceosversion, String clientvendor, String clientversion, String storage,
    String appid, String syspath);

    private static native long nativeStartState(long statePtr);
    public static long startState(RcsState state){
        return nativeStartState(state.statePtr());
    }

    // call by native
    private static void dispatchCallback(long statePtr, String funcname, String json){
        RcsState state = RcsState.getState(statePtr);
        if(state != null){
            state.dispatchCallback(funcname, json);
        }
    }
    // call by native
    private static void dispatchListener(long statePtr, String listener, String json){
        RcsState state = RcsState.getState(statePtr);
        if(state != null) {
            state.dispatchListener(listener, json);
        }
    }
    // call by native
    private static void dispatchAlarm(long statePtr, String funcname, String json){
        RcsState state = RcsState.getState(statePtr);
        if(state != null) {
            state.dispatchAlarm(funcname, json);
        }
    }
/**
 * @brief 邀请人加入群
 *
 * @param RcsState Sdk实例
 * @param groupUri 群Uri
 * @param target 被邀请用户,邀请多用户时传uid ; 分隔的串
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int gpinvitemember(RcsState state, String groupUri, String target, Callback callback){
        int sid = nativegpinvitemember(state.statePtr(), groupUri, target);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativegpinvitemember(long statePtr, String groupUri, String target);

/**
 * @brief 设置业务通知已读,设置已读状态后,新设备激活用户不再推送该通知
 *
 * @param RcsState Sdk实例
 * @param msg_imdn_id Event事件类业务通知的 imdnId
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int setnotifyread(RcsState state, String msgImdnId, Callback callback){
        int sid = nativesetnotifyread(state.statePtr(), msgImdnId);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativesetnotifyread(long statePtr, String msgImdnId);

/**
 * @brief 发送消息报告
 *
 * @param RcsState Sdk实例
 * @param number 消息报告接收者
 * @param msg_imdn_id 收到消息的 imdn_Id
 * @param report_type 送达报告类型 @see {ReportType}
 * @param directed_type 定向消息类型 @see {DirectedType}
 * @param target 送达报告类型是群消息已送达、已读时,此字段需要填写群消息发送方的Uid,其它报告类型此字段填NULL
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int msgsendreport(RcsState state, String number, String msgImdnId, int reportType, int directedType, String target, Callback callback){
        int sid = nativemsgsendreport(state.statePtr(), number, msgImdnId, reportType, directedType, target);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativemsgsendreport(long statePtr, String number, String msgImdnId, int reportType, int directedType, String target);

/**
 * @brief 关闭用户Push通知
 *
 * @param RcsState Sdk实例
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int disablepush(RcsState state, Callback callback){
        int sid = nativedisablepush(state.statePtr());
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativedisablepush(long statePtr);

/**
 * @brief provision
 *
 * @param RcsState Sdk实例
 * @param username 用户名
 * @param pwd 密码
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int provision(RcsState state, String username, String pwd, Callback callback){
        int sid = nativeprovision(state.statePtr(), username, pwd);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativeprovision(long statePtr, String username, String pwd);

/**
 * @brief 退出群
 *
 * @param RcsState Sdk实例
 * @param group_uri 群Uri
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int gpquit(RcsState state, String groupUri, Callback callback){
        int sid = nativegpquit(state.statePtr(), groupUri);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativegpquit(long statePtr, String groupUri);

/**
 * @brief 设置加好友自动同意
 *
 * @param RcsState Sdk实例
 * @param buddyflag 加好友自动同意开关 0 需要申请 1 自动同意
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int usersetbdflag(RcsState state, int buddyflag, Callback callback){
        int sid = nativeusersetbdflag(state.statePtr(), buddyflag);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativeusersetbdflag(long statePtr, int buddyflag);

/**
 * @brief 将设备从设备列表中移除
 *
 * @param RcsState Sdk实例
 * @param s_uid 设备的Uid或Username
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int deviceremove(RcsState state, String uid, Callback callback){
        int sid = nativedeviceremove(state.statePtr(), uid);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativedeviceremove(long statePtr, String uid);

/**
 * @brief 设置个人消息免打扰设置
 *
 * @param RcsState Sdk实例
 * @param dndflag 消息免打扰设置 0:未设置 1:已设置
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int usersetdnd(RcsState state, int dndflag, Callback callback){
        int sid = nativeusersetdnd(state.statePtr(), dndflag);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativeusersetdnd(long statePtr, int dndflag);

/**
 * @brief 删除群组
 *
 * @param RcsState Sdk实例
 * @param group_uri 群Uri
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int gpdelete(RcsState state, String groupUri, Callback callback){
        int sid = nativegpdelete(state.statePtr(), groupUri);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativegpdelete(long statePtr, String groupUri);

/**
 * @brief 删除好友
 *
 * @param RcsState Sdk实例
 * @param userId 本删除好友UserId
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int buddydel(RcsState state, int userId, Callback callback){
        int sid = nativebuddydel(state.statePtr(), userId);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativebuddydel(long statePtr, int userId);

/**
 * @brief 拒绝加入群组
 *
 * @param RcsState Sdk实例
 * @param group_uri 群组Uri
 * @param inviter 原邀请者ID
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int gpreject(RcsState state, String groupUri, String inviter, Callback callback){
        int sid = nativegpreject(state.statePtr(), groupUri, inviter);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativegpreject(long statePtr, String groupUri, String inviter);

/**
 * @brief 获取指定会话历史消息,根据历史消息接收时间的反序,分页拉去一个会话的历史消息
 *
 * @param RcsState Sdk实例
 * @param conv_type 会话类型: 1 二人,2 群,3 通知，@see {ConvType}
 * @param conv_id 会话ID
 * @param page_limit 一页最大条数
 * @param begin_imdn_id 起始位置,填NULL表示获取最新一页
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int getconvhistory(RcsState state, int convType, String convId, int pageLimit, String beginImdnId, Callback callback){
        int sid = nativegetconvhistory(state.statePtr(), convType, convId, pageLimit, beginImdnId);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativegetconvhistory(long statePtr, int convType, String convId, int pageLimit, String beginImdnId);

/**
 * @brief 下载共享文件
 *
 * @param RcsState Sdk实例
 * @param targetid 共享目标Id,此处指群Id
 * @param message_id 消息Id
 * @param file_id 文件传输Id
 * @param share_file_id 共享文件的标识Id
 * @param start 开始传送位置
 * @param file_size 文件大小
 * @param file_path 文件保存路径
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int fetchsharefile(RcsState state, String targetId, String messageId, String fileId, String shareFileId, int start, int fileSize, String filePath, Callback callback){
        int sid = nativefetchsharefile(state.statePtr(), targetId, messageId, fileId, shareFileId, start, fileSize, filePath);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativefetchsharefile(long statePtr, String targetId, String messageId, String fileId, String shareFileId, int start, int fileSize, String filePath);

/**
 * @brief 添加设备
 *
 * @param RcsState Sdk实例
 * @param s_uid 设备的Uid或Username(IOT:xxxx)
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int deviceadd(RcsState state, String uid, String password, Callback callback){
        int sid = nativedeviceadd(state.statePtr(), uid, password);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativedeviceadd(long statePtr, String uid, String password);

/**
 * @brief 登录
 *
 * @param RcsState Sdk实例
 * @param username 用户号码
 * @param password 密码
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int login(RcsState state, String username, String password, Callback callback){
        int sid = nativelogin(state.statePtr(), username, password);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativelogin(long statePtr, String username, String password);

/**
 * @brief 设置群内昵称
 *
 * @param RcsState Sdk实例
 * @param group_uri 群Uri
 * @param nickname 群匿称
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int gpmodifynickname(RcsState state, String groupUri, String nickName, Callback callback){
        int sid = nativegpmodifynickname(state.statePtr(), groupUri, nickName);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativegpmodifynickname(long statePtr, String groupUri, String nickName);

/**
 * @brief 获取当前用户SDK的连接状态
 *
 * @param RcsState Sdk实例
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 */
    public static int getuserstates(RcsState state, Callback callback){
        int sid = nativegetuserstates(state.statePtr());
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativegetuserstates(long statePtr);

/**
 * @brief 获取会话列表
 *
 * @param RcsState Sdk实例
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int getconvlist(RcsState state, Callback callback){
        int sid = nativegetconvlist(state.statePtr());
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativegetconvlist(long statePtr);

/**
 * @brief 设置个人隐私,uid无法查询个人资料
 *
 * @param RcsState Sdk实例
 * @param uidflag 个人隐私uid设置 0 公开 1 uid不能查询个人资料
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int usersetpermissionuidflag(RcsState state, int uidflag, Callback callback){
        int sid = nativeusersetpermissionuidflag(state.statePtr(), uidflag);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativeusersetpermissionuidflag(long statePtr, int uidflag);

/**
 * @brief 拉黑某人
 *
 * @param RcsState Sdk实例
 * @param s_uid 某人的Uid或Username(+86手机号)
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int bklistadd(RcsState state, String uid, Callback callback){
        int sid = nativebklistadd(state.statePtr(), uid);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativebklistadd(long statePtr, String uid);

/**
 * @brief 下载富文本文件
 *
 * @param RcsState Sdk实例
 * @param number 用户Id
 * @param message_id 消息Id
 * @param chatType 聊天类型，@see {ChatType}
 * @param file_path 文件保存路径
 * @param content_type 文件类型 @see {ContentType}
 * @param file_name 文件名称
 * @param transfer_id 文件传输Id
 * @param start 开始传送位置
 * @param file_size 文件大小
 * @param hash 文件Hash值
 * @param is_burn 是否阅后即焚
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int msgfetchfile(RcsState state, String number, String messageId, int chatType, String filePath, int contentType, String fileName, String transferId, int start, int fileSize, String hash, int isBurn, Callback callback){
        int sid = nativemsgfetchfile(state.statePtr(), number, messageId, chatType, filePath, contentType, fileName, transferId, start, fileSize, hash, isBurn);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativemsgfetchfile(long statePtr, String number, String messageId, int chatType, String filePath, int contentType, String fileName, String transferId, int start, int fileSize, String hash, int isBurn);

/**
 * @brief 获取短信验证码
 *
 * @param RcsState Sdk实例
 * @param number 手机号
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int getsmscode(RcsState state, String number, Callback callback){
        int sid = nativegetsmscode(state.statePtr(), number);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativegetsmscode(long statePtr, String number);

/**
 * @brief 修改群名
 *
 * @param group_uri 群Uri
 * @param subject 群名
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int gpmodifysubject(RcsState state, String groupUri, String subject, Callback callback){
        int sid = nativegpmodifysubject(state.statePtr(), groupUri, subject);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativegpmodifysubject(long statePtr, String groupUri, String subject);

/**
 * @brief 获取用户头像
 *
 * @param RcsState Sdk实例
 * @param userId 用户Id
 * @param isSmall 是否是获取小头像；建议在显示列表的时候获取小头像，速度更快
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int usergetportrait(RcsState state, int userId, int isSmall, Callback callback){
        int sid = nativeusergetportrait(state.statePtr(), userId, isSmall);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativeusergetportrait(long statePtr, int userId, int isSmall);

/**
 * @brief 修改群名
 *
 * @param group_uri 群Uri
 * @param subject 群公告
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int gpmodifybulletin(RcsState state, String groupUri, String bulletin, Callback callback){
        int sid = nativegpmodifybulletin(state.statePtr(), groupUri, bulletin);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativegpmodifybulletin(long statePtr, String groupUri, String bulletin);

/**
 * @brief 审批加入群组
 *
 * @param RcsState Sdk实例
 * @param group_uri 群组Uri
 * @param applicant 申请人,可为userid或username
 * @param handle_result 审批结果 1 : 同意 2：拒绝
 * @param reply_msg 审批说明
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int gpapproval(RcsState state, String groupUri, String applicant, int handleResult, String replyMsg, Callback callback){
        int sid = nativegpapproval(state.statePtr(), groupUri, applicant, handleResult, replyMsg);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativegpapproval(long statePtr, String groupUri, String applicant, int handleResult, String replyMsg);

/**
 * @brief 发送文件
 *
 * @param RcsState Sdk实例
 * @param number 接收者号码/UserId
 * @param messageId 消息Id
 * @param filePath 文件路径
 * @param contentType 文件类型 @see {ContentType}
 * @param fileName 文件名
 * @param needReport 是否需要送达报告
 * @param start 文件内容 offset，0 开始
 * @param thumbnail 缩略图路径，如果发送的是图片/视频，需要发送这个字段，图片最大10KB
 * @param isBurn 是否是阅后即焚消息
 * @param directedType 定向消息类型 @see {DirectedType}
 * @param needReadReport 是否需要已读报告
 * @param extension 扩展字段（由客户端自定义,服务端透传）
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int msgsendfile(RcsState state, String number, String messageId, String filePath, int contentType, String fileName, int needReport, int start, String thumbnail, int isBurn, int directedType, int needReadReport, String extension, Callback callback){
        int sid = nativemsgsendfile(state.statePtr(), number, messageId, filePath, contentType, fileName, needReport, start, thumbnail, isBurn, directedType, needReadReport, extension);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativemsgsendfile(long statePtr, String number, String messageId, String filePath, int contentType, String fileName, int needReport, int start, String thumbnail, int isBurn, int directedType, int needReadReport, String extension);

/**
 * @brief 恢复实例
 *
 * @param RcsState Sdk实例
 * @return int
 *
 */
    public static int resume(RcsState state, Callback callback){
        int sid = nativeresume(state.statePtr());
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativeresume(long statePtr);

/**
 * @brief 获取用户详细信息
 *
 * @param RcsState Sdk实例
 * @param user 用户Id/号码
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int usergetprofile(RcsState state, String user, Callback callback){
        int sid = nativeusergetprofile(state.statePtr(), user);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativeusergetprofile(long statePtr, String user);

/**
 * @brief 按照群名称搜索群组
 *
 * @param RcsState Sdk实例
 * @param subject 群名称
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int gpsearch(RcsState state, String subject, Callback callback){
        int sid = nativegpsearch(state.statePtr(), subject);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativegpsearch(long statePtr, String subject);

/**
 * @brief 发送文件
 *
 * @param RcsState Sdk实例
 * @param number 接收者号码/UserId
 * @param messageId 消息Id
 * @param filePath 文件路径
 * @param contentType 文件类型 @see {ContentType}
 * @param fileName 文件名
 * @param needReport 是否需要送达报告
 * @param start 文件内容 offset，0 开始
 * @param thumbnail 缩略图路径，如果发送的是图片/视频，需要发送这个字段，图片最大10KB
 * @param duration 视频长度
 * @param isBurn 是否是阅后即焚消息
 * @param directedType 定向消息类型 @see {DirectedType}
 * @param needReadReport 是否需要已读报告
 * @param extension 扩展字段（由客户端自定义,服务端透传）
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int msgsendfileex(RcsState state, String number, String messageId, String filePath, int contentType, String fileName, int needReport, int start, String thumbnail, int duration, int isBurn, int directedType, int needReadReport, String extension, Callback callback){
        int sid = nativemsgsendfileex(state.statePtr(), number, messageId, filePath, contentType, fileName, needReport, start, thumbnail, duration, isBurn, directedType, needReadReport, extension);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativemsgsendfileex(long statePtr, String number, String messageId, String filePath, int contentType, String fileName, int needReport, int start, String thumbnail, int duration, int isBurn, int directedType, int needReadReport, String extension);

/**
 * @brief 设置个人用户信息
 *
 * @param RcsState Sdk实例
 * @param nickname 用户昵称
 * @param impresa 用户签名
 * @param firstname 名
 * @param lastname 姓
 * @param gender 性别: 1 男，2 女，0未设置
 * @param email 邮箱
 * @param birthday 生日：格式 YYYY-MM-DD，例如： 1986-04-22
 * @param client_extra 客户端扩展字段,客户端自定制写入任何信息长度不超过1024
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int usersetprofile(RcsState state, String nickname, String impresa, String firstname, String lastname, int gender, String email, String birthday, String clientExtra, Callback callback){
        int sid = nativeusersetprofile(state.statePtr(), nickname, impresa, firstname, lastname, gender, email, birthday, clientExtra);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativeusersetprofile(long statePtr, String nickname, String impresa, String firstname, String lastname, int gender, String email, String birthday, String clientExtra);

/**
 * @brief 查询联系人状态及客户端能力
 *
 * @param RcsState Sdk实例
 * @param s_contact_id 联系人Uid或Username
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int getpresence(RcsState state, String contactId, Callback callback){
        int sid = nativegetpresence(state.statePtr(), contactId);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativegetpresence(long statePtr, String contactId);

/**
 * @brief 消息转短链接
 *
 * @param RcsState Sdk实例
 *@param messageId 消息Id
 *@param msgtype 1文本消息 2图片消息 3语言消息
 *@param content 消息内容 msgtype 为1时此值有效
 *@param filepath 文件路径 msgtype 为2,3时此值有效
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 */
    public static int msg2shorturl(RcsState state, String messageid, int msgtype, String content, String filepath, Callback callback){
        int sid = nativemsg2shorturl(state.statePtr(), messageid, msgtype, content, filepath);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativemsg2shorturl(long statePtr, String messageid, int msgtype, String content, String filepath);

/**
 * @brief 创建群组
 *
 * @param RcsState Sdk实例
 * @param resourcelist 群成员列表，用户id/号码以分号间隔
 * @param subject 群名称
 * @param introduce 群简介
 * @param bulletin 群公告
 * @param groupType 群类型 0:普通群(默认),3:讨论组
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int gpcreate(RcsState state, String resourcelists, String subject, String introduce, String bulletin, int grouptype, Callback callback){
        int sid = nativegpcreate(state.statePtr(), resourcelists, subject, introduce, bulletin, grouptype);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativegpcreate(long statePtr, String resourcelists, String subject, String introduce, String bulletin, int grouptype);

/**
 * @brief 订阅联系人在线状态,目前订阅关系服务器保存6小时,订阅关系过期后好友状态将不推送,需要重新订阅
 *
 * @param RcsState Sdk实例
 * @param cids 逗号分隔的user id字符串,例如:"849180,849179"
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int subpresence(RcsState state, String cids, Callback callback){
        int sid = nativesubpresence(state.statePtr(), cids);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativesubpresence(long statePtr, String cids);

/**
 * @brief 查询用户在线状态、能力
 *
 * @param RcsState Sdk实例
 * @param user 被查询用户Id/号码
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int capsexchange(RcsState state, String user, Callback callback){
        int sid = nativecapsexchange(state.statePtr(), user);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativecapsexchange(long statePtr, String user);


    public static int gpsublist(RcsState state, String version, Callback callback){
        int sid = nativegpsublist(state.statePtr(), version);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativegpsublist(long statePtr, String version);

/**
 * @brief 查询某台设备状态信息
 *
 * @param RcsState Sdk实例
 *
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int devicestatusget(RcsState state, String uid, Callback callback){
        int sid = nativedevicestatusget(state.statePtr(), uid);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativedevicestatusget(long statePtr, String uid);

/**
 * @brief 获取共享文件列表
 *
 * @param RcsState Sdk实例
 * @param target_id 群id
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int getsharefilelist(RcsState state, String targetId, Callback callback){
        int sid = nativegetsharefilelist(state.statePtr(), targetId);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativegetsharefilelist(long statePtr, String targetId);

    public static int onbell(RcsState state, String name, int timeout, Callback callback){
        int sid = nativeonbell(state.statePtr(), name, timeout);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativeonbell(long statePtr, String name, int timeout);

/**
 * @brief 设置会话状态,用于同步其他端
 *
 * @param RcsState Sdk实例
 * @param conv_id 为客户端会话Id，Uid 或 GroupId
 * @param msg_imdn_id 回话中最后一条消息或者Notice的imdn_id
 * @param convstate 会话状态  1:会话已读 2:会话删除
 * @param chat_type 聊天类型，@see {ChatType}
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int msgsetconvstatus(RcsState state, String convId, String msgImdnId, int convstate, int chatType, Callback callback){
        int sid = nativemsgsetconvstatus(state.statePtr(), convId, msgImdnId, convstate, chatType);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativemsgsetconvstatus(long statePtr, String convId, String msgImdnId, int convstate, int chatType);

/**
 * @brief 设置设备消息免打扰
 *  未填写begintime与endtime，表示全天免打扰。这两个属性需同时添写
 *  设置了开始行结束时间后,每天的这个时间段都是免打扰状态,直到flag设置为0为至
 *
 * @param RcsState Sdk实例
 * @param flag 消息免打扰 0:未开启,1:开启
 * @param begintime 免打扰开始时间,格式：H:M. 如 10:10 表示10点10分开始
 * @param endtime 免打扰结否时间,格式：H:M, 如 14:10 表示14点10分结束
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int setendpointdnd(RcsState state, int flag, String begintime, String endtime, Callback callback){
        int sid = nativesetendpointdnd(state.statePtr(), flag, begintime, endtime);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativesetendpointdnd(long statePtr, int flag, String begintime, String endtime);

/**
 * @brief 注销登录
 *
 * @param RcsState Sdk实例
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int logout(RcsState state, Callback callback){
        int sid = nativelogout(state.statePtr());
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativelogout(long statePtr);

/**
 * @brief 取消文件上传下载操作
 *
 * @param RcsState Sdk实例
 * @param message_id 消息Id
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int canceltransfer(RcsState state, String messageId, Callback callback){
        int sid = nativecanceltransfer(state.statePtr(), messageId);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativecanceltransfer(long statePtr, String messageId);

/**
 * @brief 踢设备下线
 *
 * @param RcsState Sdk实例
 * @param client_id 客户端ID
 * @param client_type 客户端类型  @see {ClientType}
 * @param client_version 客户端版本
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int bootendpoint(RcsState state, String clientId, int clientType, String clientVersion, Callback callback){
        int sid = nativebootendpoint(state.statePtr(), clientId, clientType, clientVersion);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativebootendpoint(long statePtr, String clientId, int clientType, String clientVersion);

/**
 * @brief 订阅群信息
 *
 * 通过该方法获取群组详细信息，通过 GroupInfoSession/ Listener 获得群信息 TODO
 *
 * @param RcsState Sdk实例
 * @param group_uri 群Uri
 * @param info_version 群Info版本号
 * @param members_version 群成员Members版本号
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int gpsubinfo(RcsState state, String groupUri, String infoVersion, String membersVersion, Callback callback){
        int sid = nativegpsubinfo(state.statePtr(), groupUri, infoVersion, membersVersion);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativegpsubinfo(long statePtr, String groupUri, String infoVersion, String membersVersion);

/**
 * @brief 删除群成员
 *
 * @param RcsState Sdk实例
 * @param group_uri 群Uri
 * @param target 被删除用户ID，注意：这里必须是用户ID
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int gpremovemember(RcsState state, String groupUri, String target, Callback callback){
        int sid = nativegpremovemember(state.statePtr(), groupUri, target);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativegpremovemember(long statePtr, String groupUri, String target);

/**
 * @brief 停止实例,销毁rcs_state对象
 *
 * @param RcsState Sdk实例
 * @return int
 *
 */
    public static int stop(RcsState state, Callback callback){
        int sid = nativestop(state.statePtr());
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativestop(long statePtr);

/**
 * @brief 获取用户概要信息，支持批量获取
 *
 * 更多用以得到好友列表之后，批量获取概要信息
 *
 * @param RcsState Sdk实例
 * @param ids 用户Id，以分号`;` 间隔
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int usergetinfo(RcsState state, String ids, Callback callback){
        int sid = nativeusergetinfo(state.statePtr(), ids);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativeusergetinfo(long statePtr, String ids);

/**
 * @brief 获取黑名单列表
 *
 * @param RcsState Sdk实例
 *
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int bklistget(RcsState state, Callback callback){
        int sid = nativebklistget(state.statePtr());
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativebklistget(long statePtr);

/**
 * @brief 将某人移除黑名单
 *
 * @param RcsState Sdk实例
 * @param s_uid 某人的Uid或Username
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int bklistremove(RcsState state, String uid, Callback callback){
        int sid = nativebklistremove(state.statePtr(), uid);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativebklistremove(long statePtr, String uid);

/**
 * @brief 发送文本消息
 *
 * @param RcsState Sdk实例
 * @param number 用户Id
 * @param message_id 消息Id，全局唯一；消息送达报告等都通过该ID匹配，建议使用 UUID
 * @param content 消息内容；大小小于 10KB
 * @param need_report 是否需要送达报告
 * @param is_burn 是否阅后即焚
 * @param directed_type 定向消息类型  @see {DirectedType}
 * @param need_read_report 是否需要已读报告
 * @param extension 扩展字段（由客户端自定义,服务端透传）
 * @param contentType 消息类型,此处取值为1表示文本消息,100表示透传消息 @see {ContentType}
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int msgsendtext(RcsState state, String number, String messageId, String content, int needReport, int isBurn, int directedType, int needReadReport, String extension, int contentType, Callback callback){
        int sid = nativemsgsendtext(state.statePtr(), number, messageId, content, needReport, isBurn, directedType, needReadReport, extension, contentType);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativemsgsendtext(long statePtr, String number, String messageId, String content, int needReport, int isBurn, int directedType, int needReadReport, String extension, int contentType);

/**
 * @brief 退订联系人在线状态
 *
 * @param RcsState Sdk实例
 * @param cids 逗号分隔的user id字符串,例如:"849180,849179"
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int unsubpresence(RcsState state, String cids, Callback callback){
        int sid = nativeunsubpresence(state.statePtr(), cids);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativeunsubpresence(long statePtr, String cids);

/**
 * @brief 加入群组
 *
 * @param RcsState Sdk实例
 * @param group_uri 群组Uri
 * @param inviter 原邀请者ID
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int gpjoin(RcsState state, String groupUri, String inviter, Callback callback){
        int sid = nativegpjoin(state.statePtr(), groupUri, inviter);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativegpjoin(long statePtr, String groupUri, String inviter);

/**
 * @brief 发送群组文本消息
 *
 * @param RcsState Sdk实例
 * @param group_uri 群组Uri
 * @param message_id 消息Id，全局唯一；消息送达报告等都通过该ID匹配，建议使用 UUID
 * @param content 消息内容；大小小于 10KB
 * @param need_report 是否需要送达报告
 * @param ccNumber 用户ID信息，多个时用";"分号隔开，用于发消息时@用户
 * @param need_read_report 是否需要已读报告
 * @param extension 扩展字段（由客户端自定义,服务端透传）
 * @param contentType 消息类型,此处取值为1表示文本消息,100表示透传消息 @see {ContentType}
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int msggpsendtext(RcsState state, String groupUri, String messageId, String content, int needReport, String ccNumber, int needReadReport, String extension, int contentType, Callback callback){
        int sid = nativemsggpsendtext(state.statePtr(), groupUri, messageId, content, needReport, ccNumber, needReadReport, extension, contentType);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativemsggpsendtext(long statePtr, String groupUri, String messageId, String content, int needReport, String ccNumber, int needReadReport, String extension, int contentType);

/**
 * @brief 设置群消息免打扰
 *
 * @param RcsState Sdk实例
 * @param group_uri 群Uri
 * @param flag 消息免打扰 0:未开启,1:开启
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int gpsetdnd(RcsState state, String groupUri, int flag, Callback callback){
        int sid = nativegpsetdnd(state.statePtr(), groupUri, flag);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativegpsetdnd(long statePtr, String groupUri, int flag);

/**
 * @brief provisiondm
 *
 * @param RcsState Sdk实例
 * @param number
 * @param token
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int provisiondm(RcsState state, String number, String token, Callback callback){
        int sid = nativeprovisiondm(state.statePtr(), number, token);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativeprovisiondm(long statePtr, String number, String token);

/**
 * @brief 设置PUSH 消息未读条数
 *
 * @param RcsState Sdk实例
 * @param badge 未读数
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int setpushbadge(RcsState state, int badge, Callback callback){
        int sid = nativesetpushbadge(state.statePtr(), badge);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativesetpushbadge(long statePtr, int badge);

/**
 * @brief 删除设备信息
 *
 * @param RcsState Sdk实例
 * @param client_id 客户端ID
 * @param client_type 客户端类型  @see {ClientType}
 * @param client_version 客户端版本
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int deleteendpoint(RcsState state, String clientId, int clientType, String clientVersion, Callback callback){
        int sid = nativedeleteendpoint(state.statePtr(), clientId, clientType, clientVersion);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativedeleteendpoint(long statePtr, String clientId, int clientType, String clientVersion);

/**
 * @brief 获取设备列表
 *
 * @param RcsState Sdk实例
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int getendpointlist(RcsState state, Callback callback){
        int sid = nativegetendpointlist(state.statePtr());
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativegetendpointlist(long statePtr);

/**
 * @brief 发送群组文件类型消息
 *
 * @param RcsState Sdk实例
 * @param group_uri 群Uri
 * @param message_id 消息Id
 * @param file_path 文件路径
 * @param content_type 文件类型  @see {ContentType}
 * @param file_name 文件名
 * @param need_report 是否需要送达报告
 * @param start 文件内容 offset，0 开始
 * @param thumbnail 缩略图路径，如果发送的是图片/视频，需要发送这个字段，图片最大10KB
 * @param need_read_report 是否需要已读报告
 * @param extension 扩展字段（由客户端自定义,服务端透传）
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int msggpsendfile(RcsState state, String groupUri, String messageId, String filePath, int contentType, String fileName, int needReport, int start, String thumbnail, int needReadReport, String extension, Callback callback){
        int sid = nativemsggpsendfile(state.statePtr(), groupUri, messageId, filePath, contentType, fileName, needReport, start, thumbnail, needReadReport, extension);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativemsggpsendfile(long statePtr, String groupUri, String messageId, String filePath, int contentType, String fileName, int needReport, int start, String thumbnail, int needReadReport, String extension);

/**
 * @brief 设置用户Push通知
 *
 * @param RcsState Sdk实例
 * @param token 设备token值
 * @param server_type 推送服务器类型 1: APNS（默认） 2:GCM  3:小米 [可选]
 * @param show_preview 是否显示消息摘要 0: 不显示 1: 显示（默认）[可选]
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int setpush(RcsState state, String token, int serverType, int showPreview, Callback callback){
        int sid = nativesetpush(state.statePtr(), token, serverType, showPreview);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativesetpush(long statePtr, String token, int serverType, int showPreview);

/**
 * @brief 处理添加好友请求
 *
 * @param RcsState Sdk实例
 * @param userId 好友UserId
 * @param accept 是否同意
 * @param reason 原因
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int buddyhandle(RcsState state, int userId, int accept, String reason, Callback callback){
        int sid = nativebuddyhandle(state.statePtr(), userId, accept, reason);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativebuddyhandle(long statePtr, int userId, int accept, String reason);

/**
 * @brief 转移群管理员
 *
 * @param RcsState Sdk实例
 * @param group_uri 群Uri
 * @param target 接收者 UserId
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int gpchangemanager(RcsState state, String groupUri, String target, Callback callback){
        int sid = nativegpchangemanager(state.statePtr(), groupUri, target);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativegpchangemanager(long statePtr, String groupUri, String target);

/**
 * @brief doconnect
 *
 * @param RcsState Sdk实例
 * @param disconnect 是否断连接
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int doconnect(RcsState state, int disconnect, Callback callback){
        int sid = nativedoconnect(state.statePtr(), disconnect);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativedoconnect(long statePtr, int disconnect);

/**
 * @brief 获取群共享信息
 *
 * @param RcsState Sdk实例
 * @param group_uri 群Uri
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int gpshareinfo(RcsState state, String groupUri, Callback callback){
        int sid = nativegpshareinfo(state.statePtr(), groupUri);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativegpshareinfo(long statePtr, String groupUri);

/**
 * @brief 设置消息免打扰
 *
 * @param RcsState Sdk实例
 * @param userId 设置用户userId
 * @param dnd_flag 免打扰开关 0: 提醒(默认)  1: 句打扰
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int buddydnd(RcsState state, int userId, int dndFlag, Callback callback){
        int sid = nativebuddydnd(state.statePtr(), userId, dndFlag);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativebuddydnd(long statePtr, int userId, int dndFlag);

/**
 * @brief 备注好友信息
 *
 * @param RcsState Sdk实例
 * @param userId 用户userId
 * @param memo 备注名
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int buddymemo(RcsState state, int userId, String memo, Callback callback){
        int sid = nativebuddymemo(state.statePtr(), userId, memo);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativebuddymemo(long statePtr, int userId, String memo);

/**
 * @brief 添加好友
 *
 * @param RcsState Sdk实例
 * @param user 用户ID/好友
 * @param reason 请求好友原因/描述
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int buddyadd(RcsState state, String user, String reason, Callback callback){
        int sid = nativebuddyadd(state.statePtr(), user, reason);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativebuddyadd(long statePtr, String user, String reason);

/**
 * @brief 设置头像
 *
 * @param RcsState Sdk实例
 * @param filePath 头像文件路径
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int usersetportrait(RcsState state, String filePath, Callback callback){
        int sid = nativeusersetportrait(state.statePtr(), filePath);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativeusersetportrait(long statePtr, String filePath);

/**
 * @brief 设置个人隐私,username无法查询个人资料
 *
 * @param RcsState Sdk实例
 * @param unameflag 个人隐私username设置 0 公开 1 uid不能查询个人资料
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int usersetpermissionunameflag(RcsState state, int unameflag, Callback callback){
        int sid = nativeusersetpermissionunameflag(state.statePtr(), unameflag);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativeusersetpermissionunameflag(long statePtr, int unameflag);

/**
 * @brief 申请加入群组
 *
 * @param RcsState Sdk实例
 * @param group_uri 群组Uri
 * @param remark 申请说明
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int gpapply(RcsState state, String groupUri, String remark, Callback callback){
        int sid = nativegpapply(state.statePtr(), groupUri, remark);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativegpapply(long statePtr, String groupUri, String remark);

/**
 * @brief 设置只能群主邀请成员的falg
 *
 * @param RcsState Sdk实例
 * @param group_uri 群Uri
 * @param flag 邀请设置flag 0: 不限制  1: 只有群主可以邀请
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int gpmodifyinviteflag(RcsState state, String groupUri, int flag, Callback callback){
        int sid = nativegpmodifyinviteflag(state.statePtr(), groupUri, flag);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativegpmodifyinviteflag(long statePtr, String groupUri, int flag);

/**
 * @brief 获取指定文件的id
 *
 * @param RcsState Sdk实例
*@param filename 文件的绝对路径
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 */
    public static int getfileid(RcsState state, String filename, Callback callback){
        int sid = nativegetfileid(state.statePtr(), filename);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativegetfileid(long statePtr, String filename);

/**
 * @brief provisionotp
 *
 * @param RcsState Sdk实例
 * @param smscode
 * @param username
 * @param otp
 * @param sessid
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int provisionotp(RcsState state, String smscode, String username, String otp, String sessid, Callback callback){
        int sid = nativeprovisionotp(state.statePtr(), smscode, username, otp, sessid);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativeprovisionotp(long statePtr, String smscode, String username, String otp, String sessid);

/**
 * @brief 获取设备列表
 *
 * @param RcsState Sdk实例
 *
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int devicelistget(RcsState state, Callback callback){
        int sid = nativedevicelistget(state.statePtr());
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativedevicelistget(long statePtr);

/**
 * @brief 删除共享文件
 *
 * @param RcsState Sdk实例
 * @param target_id 群id
 * @param file_id 文件传输Id
 * @param share_file_id 共享文件的标识Id
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int deletesharefile(RcsState state, String targetId, String fileId, String shareFileId, Callback callback){
        int sid = nativedeletesharefile(state.statePtr(), targetId, fileId, shareFileId);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativedeletesharefile(long statePtr, String targetId, String fileId, String shareFileId);

/**
 * @brief 上传共享文件
 *
 * @param RcsState Sdk实例
 * @param targetid 共享目标Id,此处指群Id
 * @param messageId 消息Id,用于发送文件进度
 * @param filePath 文件路径
 * @param fileName 文件名
 * @param expire 文件保存天数
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int uploadsharefile(RcsState state, String targetId, String messageId, String filePath, String fileName, int expire, Callback callback){
        int sid = nativeuploadsharefile(state.statePtr(), targetId, messageId, filePath, fileName, expire);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativeuploadsharefile(long statePtr, String targetId, String messageId, String filePath, String fileName, int expire);

/**
 * @brief 获取用户Token
 *
 * @param RcsState Sdk实例
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int token(RcsState state, Callback callback){
        int sid = nativetoken(state.statePtr());
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativetoken(long statePtr);

/**
 * @brief 设置富媒体消息状态,用于同步其他端
 *
 * @param RcsState Sdk实例
 * @param number 消息发送者
 * @param msg_imdn_id 要设置消息或Notice的imdn_Id
 * @param msgstate 文件状态  1:已打开 (如媒体文件已经播放) 2:已删除 (如媒体文件已删除)
 * @param chat_type 聊天类型，@see {ChatType}
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int msgsetstatus(RcsState state, String number, String msgImdnId, int msgstate, int chatType, Callback callback){
        int sid = nativemsgsetstatus(state.statePtr(), number, msgImdnId, msgstate, chatType);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativemsgsetstatus(long statePtr, String number, String msgImdnId, int msgstate, int chatType);

/**
 * @brief 修改群名
 *
 * @param group_uri 群Uri
 * @param subject 群简介
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int gpmodifyintroduce(RcsState state, String groupUri, String introduce, Callback callback){
        int sid = nativegpmodifyintroduce(state.statePtr(), groupUri, introduce);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativegpmodifyintroduce(long statePtr, String groupUri, String introduce);

/**
 * @brief 暂停实例
 *
 * @param RcsState Sdk实例
 * @return int
 *
 */
    public static int suspend(RcsState state, Callback callback){
        int sid = nativesuspend(state.statePtr());
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativesuspend(long statePtr);

/**
 * @brief 设置群自定义扩展信息,比如群关联的课程等 协议格式客户端自己设定
 *
 * @param RcsState Sdk实例
 * @param group_uri 群Uri
 * @param extra 群扩展信息,客户端可自己定制
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int gpmodifyextra(RcsState state, String groupUri, String extra, Callback callback){
        int sid = nativegpmodifyextra(state.statePtr(), groupUri, extra);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativegpmodifyextra(long statePtr, String groupUri, String extra);

/**
 * @brief provision
 *
 * @param RcsState Sdk实例
 * @param username 用户名
 * @param pwd 密码
 * @param Callback 应答回调
 * @return int 任务id,用于客户端匹配是哪次api调用,-1表示调用失败
 *
 */
    public static int provisioniot(RcsState state, String username, String pwd, Callback callback){
        int sid = nativeprovisioniot(state.statePtr(), username, pwd);
        if(callback != null){
            state.addCallback(sid, callback);
        }
        return sid;
    }
    private static native int nativeprovisioniot(long statePtr, String username, String pwd);


    // unuse test code
    public static void main(String[] args) {
    }

}

